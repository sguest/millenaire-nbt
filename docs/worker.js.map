{"version":3,"file":"worker.js","sourceRoot":"","sources":["../src/blocklist.ts","../src/fileParserTypes.ts","../src/customBlocklist.ts","../src/customMeta.ts","../src/dataConvert.ts","../src/nbtConvert.ts","../src/fileGenerator.ts","../src/worker.ts"],"names":[],"mappings":"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","sourcesContent":["export interface Blocklist {\r\n    [key: string]: BlocklistItem;\r\n}\r\n\r\nexport interface BlocklistItem {\r\n    identifier: string;\r\n    blockId: string;\r\n    stateValues: string;\r\n    placeAfter: boolean;\r\n}\r\n\r\nexport function parseBlocklist(files: FileList): Blocklist {\r\n    let blocklist: Blocklist = {};\r\n\r\n    Array.from(files).forEach(file => {\r\n        file.text().then(text => {\r\n            for(let line of text.split(/\\r?\\n/)) {\r\n                if(line?.trim().length && !line.startsWith('//')) {\r\n                    let parts = line.split(';');\r\n                    let identifier = parts[0];\r\n                    let blockId = parts[1];\r\n                    let stateValues = parts[2];\r\n                    let placeAfter = parts[3];\r\n                    let colourString = parts[4];\r\n\r\n                    blocklist[colourString] = {\r\n                        identifier,\r\n                        blockId,\r\n                        stateValues,\r\n                        placeAfter: /true/i.test(placeAfter),\r\n                    }\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw e;\r\n        })\r\n    });\r\n\r\n    return blocklist;\r\n}","export interface FileBuildingData {\r\n    path: string;\r\n    textFile?: TxtBuildingData;\r\n    pngs: PngBuildingData[];\r\n    promises: Promise<void>[];\r\n}\r\n\r\nexport interface PngBuildingData {\r\n    path: string;\r\n    imageData: ImageData;\r\n    index: number;\r\n}\r\n\r\nexport interface TxtBuildingData {\r\n    width: number;\r\n    length: number;\r\n    startLevels: number[];\r\n}","let customBlocklist: {[key: string]: {id: string, properties?: {[key: string]: string}, placeAfter?: boolean}} = {\r\n    grass: {\r\n        id: 'minecraft:grass'\r\n    },\r\n    mainchestTop: {\r\n        id: 'millenaire:locked_chest',\r\n        properties: {\r\n            facing: 'east'\r\n        }\r\n    },\r\n    mainchestBottom: {\r\n        id: 'millenaire:locked_chest',\r\n        properties: {\r\n            facing: 'west'\r\n        }\r\n    },\r\n    mainchestLeft: {\r\n        id: 'millenaire:locked_chest',\r\n        properties: {\r\n            facing: 'north'\r\n        }\r\n    },\r\n    mainchestRight: {\r\n        id: 'millenaire:locked_chest',\r\n        properties: {\r\n            facing: 'south'\r\n        }\r\n    },\r\n    lockedchestTop: {\r\n        id: 'millenaire:locked_chest',\r\n        properties: {\r\n            facing: 'east'\r\n        }\r\n    },\r\n    lockedchestBottom: {\r\n        id: 'millenaire:locked_chest',\r\n        properties: {\r\n            facing: 'west'\r\n        }\r\n    },\r\n    lockedchestLeft: {\r\n        id: 'millenaire:locked_chest',\r\n        properties: {\r\n            facing: 'north'\r\n        }\r\n    },\r\n    lockedchestRight: {\r\n        id: 'millenaire:locked_chest',\r\n        properties: {\r\n            facing: 'south'\r\n        }\r\n    },\r\n    soil: { id: 'minecraft:farmland'},\r\n    ricesoil: { id: 'minecraft:farmland'},\r\n    turmericsoil: { id: 'minecraft:farmland'},\r\n    sugarcanesoil: { id: 'minecraft:dirt', properties: { variant: 'dirt' }},\r\n    potatosoil: { id: 'minecraft:farmland'},\r\n    netherwartsoil: { id: 'minecraft:soul_sand'},\r\n    vinesoil: { id: 'minecraft:dirt'},\r\n    maizesoil: { id: 'minecraft:farmland'},\r\n    carrotsoil: { id: 'minecraft:farmland'},\r\n    flowersoil: { id: 'minecraft:grass'},\r\n    cottonsoil: { id: 'minecraft:farmland'},\r\n    oakspawn: {\r\n        id: 'minecraft:sapling',\r\n        properties: {\r\n            type: 'oak',\r\n            stage: '0',\r\n        }\r\n    },\r\n    pinespawn: {\r\n        id: 'minecraft:sapling',\r\n        properties: {\r\n            type: 'spruce',\r\n            stage: '0',\r\n        }\r\n    },\r\n    birchspawn: {\r\n        id: 'minecraft:sapling',\r\n        properties: {\r\n            type: 'birch',\r\n            stage: '0',\r\n        }\r\n    },\r\n    junglespawn: {\r\n        id: 'minecraft:sapling',\r\n        properties: {\r\n            type: 'jungle',\r\n            stage: '0',\r\n        }\r\n    },\r\n    acaciaspawn: {\r\n        id: 'minecraft:sapling',\r\n        properties: {\r\n            type: 'acacia',\r\n            stage: '0',\r\n        }\r\n    },\r\n    darkoakspawn: {\r\n        id: 'minecraft:sapling',\r\n        properties: {\r\n            type: 'dark_oak',\r\n            stage: '0',\r\n        }\r\n    },\r\n    applespawn: {\r\n        id: 'millenaire:sapling_appletree',\r\n        properties: {\r\n            stage: '0',\r\n        }\r\n    },\r\n    olivespawn: {\r\n        id: 'millenaire:sapling_olivetree',\r\n        properties: {\r\n            stage: '0',\r\n        }\r\n    },\r\n    pistachiospawn: {\r\n        id: 'millenaire:sapling_pistachio',\r\n        properties: {\r\n            stage: '0',\r\n        }\r\n    },\r\n    brewingstand: { id: 'minecraft:brewing_stand'},\r\n    snailsoilblock: {\r\n        id: 'millenaire:snail_soil',\r\n        properties: { progress: 'snail_soil_empty' }\r\n    },\r\n}\r\n\r\nexport default customBlocklist;","interface MetaEntry {\r\n    [key: string]: string\r\n}\r\n\r\ninterface BlockMeta {\r\n    [key: number]: MetaEntry\r\n}\r\n\r\nlet standardColours = {\r\n    1: { color: 'orange' },\r\n    2: { color: 'magenta' },\r\n    3: { color: 'light_blue' },\r\n    4: { color: 'yellow' },\r\n    5: { color: 'lime' },\r\n    6: { color: 'pink' },\r\n    7: { color: 'gray' },\r\n    8: { color: 'silver' },\r\n    9: { color: 'cyan' },\r\n    10: { color: 'purple' },\r\n    11: { color: 'blue' },\r\n    12: { color: 'brown' },\r\n    13: { color: 'green' },\r\n    14: { color: 'red' },\r\n    15: { color: 'black' },\r\n};\r\n\r\n\r\nlet customMeta: {[key: string]: BlockMeta} = {\r\n    'minecraft:dirt': {\r\n        1: { variant: 'coarse_dirt' }\r\n    },\r\n    'minecraft:stonebrick': {\r\n        1: { variant: 'mossy_stonebrick' },\r\n        2: { variant: 'cracked_stonebrick' },\r\n        3: { variant: 'chiseled_stonebrick' }\r\n    },\r\n    'minecraft:sand': {\r\n        1: { variant: 'red_sand'}\r\n    },\r\n    'minecraft:sandstone': {\r\n        1: { type: 'chiseled_sandstone' },\r\n        2: { type: 'smooth_sandstone' }\r\n    },\r\n    'minecraft:red_sandstone': {\r\n        1: { type: 'chiseled_red_sandstone'},\r\n        2: { type: 'smooth_red_sandstone'}\r\n    },\r\n    'minecraft:red_flower': {\r\n        1: { type: 'blue_orchid' },\r\n        2: { type: 'allium'},\r\n        3: { type: 'houstonia' },\r\n        4: { type: 'red_tulip' },\r\n        5: { type: 'orange_tulip' },\r\n        6: { type: 'white_tulip' },\r\n        7: { type: 'pink_tulip' },\r\n        8: { type: 'oxeye_daisy' }\r\n    },\r\n    'minecraft:stone_slab': {\r\n        1: { half: 'bottom', variant: 'sandstone' },\r\n        3: { half: 'bottom', variant: 'cobblestone' },\r\n        4: { half: 'bottom', variant: 'brick' },\r\n        5: { half: 'bottom', variant: 'stone_brick'},\r\n        8: { half: 'top', variant: 'stone' },\r\n        9: { half: 'top', variant: 'sandstone' },\r\n        11: { half: 'top', variant: 'cobblestone'},\r\n        12: { half: 'top', variant: 'brick' },\r\n        13: { half: 'top', variant: 'stone_brick' }\r\n    },\r\n    'minecraft:stone_slab2': {\r\n        8: { half: 'top', variant: 'red_sandstone' }\r\n    },\r\n    'minecraft:wooden_slab': {\r\n        1: { half: 'bottom', variant: 'spruce' },\r\n        2: { half: 'bottom', variant: 'birch' },\r\n        3: { half: 'bottom', variant: 'jungle' },\r\n        4: { half: 'bottom', variant: 'acacia' },\r\n        5: { half: 'bottom', variant: 'dark_oak' },\r\n        8: { half: 'top', variant: 'oak' },\r\n        9: { half: 'top', variant: 'spruce' },\r\n        10: {half: 'top', variant: 'birch' },\r\n        11: { half: 'top', variant: 'jungle' },\r\n        12: { half: 'top', variant: 'acacia' },\r\n        13: { half: 'top', variant: 'dark_oak' }\r\n    },\r\n    'minecraft:wool': standardColours,\r\n    'millenaire:wood_deco': {\r\n        1: { variant: 'timberframecross' },\r\n        2: { variant: 'thatch' }\r\n    },\r\n    // the path blocks have meta values specified in blocklist, but the meta doesn't seem to do anything\r\n    // add dud entries here so the converter doesn't give meaningless warnings\r\n    'millenaire:pathdirt': { 1: {} },\r\n    'millenaire:pathgravel': { 1: {} },\r\n    'millenaire:pathslabs': { 1: {} },\r\n    'millenaire:pathsandstone': { 1: {} },\r\n    'millenaire:pathochretiles': { 1: {} },\r\n    'millenaire:pathgravelslabs': { 1: {} },\r\n    'millenaire:pathsnow': { 1: {} },\r\n    'millenaire:pathdirt_slab': { 1: {} },\r\n    'millenaire:pathgravel_slab': { 1: {} },\r\n    'millenaire:pathslabs_slab': { 1: {} },\r\n    'millenaire:pathsandstone_slab': { 1: {} },\r\n    'millenaire:pathochretiles_slab': { 1: {} },\r\n    'millenaire:pathgravelslabs_slab': { 1: {} },\r\n    'millenaire:pathsnow_slab': { 1: {} },\r\n    'millenaire:crop_maize': {\r\n        7: { age: '7' }\r\n    },\r\n    'miillenaire:stone_deco': {\r\n        2: { variant: 'mayangoldblock' }\r\n    },\r\n    'minecraft:sapling': {\r\n        1: { type: 'spruce', stage: '0' }\r\n    },\r\n    'minecraft:tallgrass': {\r\n        1: { type: 'tall_grass' },\r\n        2: { type: 'fern' }\r\n    },\r\n    'minecraft:redstone_torch': {\r\n        5: {}\r\n    },\r\n    'minecraft:stone_button': {\r\n        1: { facing: 'east' },\r\n        2: { facing: 'west' },\r\n        3: { facing: 'south' },\r\n        4: { facing: 'north' },\r\n        5: { facing: 'up' }\r\n    },\r\n    'minecraft:snow_layer': {\r\n        1: { layers: '1' },\r\n        2: { layers: '2' },\r\n        3: { layers: '3' },\r\n        4: { layers: '4' },\r\n        5: { layers: '5' },\r\n        6: { layers: '6' },\r\n        7: { layers: '7' }\r\n    },\r\n    'minecraft:vine': {\r\n        1: { north: 'true' },\r\n        2: { east: 'true' },\r\n        4: { south: 'true' },\r\n        8: { west: 'true' }\r\n    },\r\n    'minecraft:cauldron': {\r\n        3: { level: '3' }\r\n    },\r\n    'minecraft:nether_wart': {\r\n        3: { age: '3' }\r\n    },\r\n    'minecraft:stained_glass_pane': standardColours,\r\n    'minecraft:carpet': standardColours,\r\n    'minecraft:concrete': standardColours,\r\n    'millenaire:leaves_olivetree': {\r\n        1: {\r\n            age: '1',\r\n            check_decay: 'false',\r\n            decayable: 'true'\r\n        }\r\n    },\r\n    'minecraft:flower_pot': {\r\n        1: { contents: 'rose' },\r\n        2: { contents: 'blue_orchid' },\r\n        3: { contents: 'allium' },\r\n        4: { contents: 'houstonia' },\r\n        5: { contents: 'red_tulip' },\r\n        6: { contents: 'orange_tulip' },\r\n        7: { contents: 'white_tulip' },\r\n        8: { contents: 'pink_tulip' },\r\n        9: { contents: 'oxeye_daisy' },\r\n        10: { contents: 'dandelion' },\r\n        11: { contents: 'oak_sapling' },\r\n        12: { contents: 'spruce_sapling' },\r\n        13: { contents: 'birch_sapling' },\r\n        14: { contents: 'jungle_sapling' },\r\n        15: { contents: 'acacia_sapling' },\r\n        16: { contents: 'dark_oak_sapling' },\r\n        17: { contents: 'mushroom_red' },\r\n        18: { contents: 'mushroom_brown' },\r\n        19: { contents: 'dead_bush' },\r\n        20: { contents: 'fern' },\r\n        21: { contents: 'cactus' },\r\n    }\r\n}\r\n\r\nexport default customMeta;","import { FileBuildingData } from \"./fileParserTypes\";\r\nimport { Blocklist, BlocklistItem } from './blocklist';\r\nimport customBlocklist from './customBlocklist';\r\nimport customMeta from './customMeta';\r\n\r\nexport interface PaletteItem {\r\n    name: string;\r\n    index: number;\r\n    properties: { [key: string]: string };\r\n    placeAfter: boolean;\r\n}\r\n\r\nexport interface BlockItem {\r\n    state: number;\r\n    after: boolean;\r\n}\r\n\r\nexport interface BuildingData {\r\n    path: string;\r\n    width: number;\r\n    length: number;\r\n    height: number;\r\n    startLevel: number;\r\n    palette: PaletteItem[];\r\n    blocks: BlockItem[][][];\r\n}\r\n\r\nfunction blocklistToPalette(blocklistItem: BlocklistItem, index: number, buildingIndex: number): PaletteItem | null {\r\n    if(blocklistItem.blockId.length) {\r\n        let stateValues: {[key: string]: string} = {};\r\n        if(blocklistItem.stateValues.length) {\r\n            if(isNaN(+blocklistItem.stateValues)) {\r\n                for(let stateItem of blocklistItem.stateValues.split(',')) {\r\n                    let stateParts = stateItem.split('=');\r\n                    stateValues[stateParts[0]] = stateParts[1];\r\n                }\r\n            }\r\n            else if(+blocklistItem.stateValues > 0) {\r\n                let meta = +blocklistItem.stateValues\r\n                let blockStateLookup = customMeta[blocklistItem.blockId];\r\n                if(blockStateLookup && blockStateLookup[meta]) {\r\n                    stateValues = blockStateLookup[meta];\r\n                }\r\n                else {\r\n                    postMessage({cmd: 'warning', message: `Warning: unrecognized meta value ${meta} for block ID ${blocklistItem.blockId}. Using base version of block.`});\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            name: blocklistItem.blockId,\r\n            properties: stateValues,\r\n            index,\r\n            placeAfter: blocklistItem.placeAfter,\r\n        };\r\n    }\r\n    else if(/^free./.test(blocklistItem.identifier)) {\r\n        return {\r\n            name: 'millenaire:freeblock',\r\n            properties: { resource: blocklistItem.identifier.replace(/^free/, '') },\r\n            index,\r\n            placeAfter: false,\r\n        }\r\n    }\r\n    else if(/.source$/.test(blocklistItem.identifier)) {\r\n        return {\r\n            name: 'millenaire:source',\r\n            properties: { resource: blocklistItem.identifier.replace(/source$/, '') },\r\n            index,\r\n            placeAfter: false,\r\n        }\r\n    }\r\n    else if(/^cultureBannerStanding\\d+$/.test(blocklistItem.identifier) || /^villageBannerStanding\\d+$/.test(blocklistItem.identifier)) {\r\n        let rotation = /\\d+$/.exec(blocklistItem.identifier)![0];\r\n        return {\r\n            name: 'minecraft:standing_banner',\r\n            properties: { rotation },\r\n            index,\r\n            placeAfter: blocklistItem.placeAfter,\r\n        }\r\n    }\r\n    else {\r\n        let custom = customBlocklist[blocklistItem.identifier];\r\n        if(custom) {\r\n            return {\r\n                name: custom.id,\r\n                properties: custom.properties || {},\r\n                index,\r\n                placeAfter: !!custom.placeAfter,\r\n            }\r\n        }\r\n    }\r\n\r\n    // haven't found a match. If 'preserveground' or this is an upgrade (not initial state)\r\n    // return nothing so existing block remains\r\n    if(blocklistItem.identifier === 'preserveground' || buildingIndex > 0) {\r\n        return null;\r\n    }\r\n    // for any unrecognized entry for base-level, return air so that existing ground blocks get cleared\r\n    // this is mostly for millenaire markers that aren't actual blocks - selling position, defending position, etc\r\n    return {\r\n        name: 'minecraft:air',\r\n        properties: {},\r\n        index,\r\n        placeAfter: false,\r\n    };\r\n}\r\n\r\nfunction getBedFootPalette(headPalette: PaletteItem, index: number): PaletteItem {\r\n    let footProperties: {[key: string]: string} = {};\r\n    for(let propertyName in headPalette.properties) {\r\n        footProperties[propertyName] = headPalette.properties[propertyName];\r\n    }\r\n    footProperties['part'] = 'foot';\r\n    return {\r\n        name: headPalette.name,\r\n        index: index,\r\n        placeAfter: headPalette.placeAfter,\r\n        properties: footProperties,\r\n    };\r\n}\r\n\r\nlet bedDeltas: {[key: string]: {x: number, z: number}} = {\r\n    north: {x: 0, z: 1},\r\n    south: {x: 0, z: -1},\r\n    west: {x: 1, z: 0},\r\n    east: {x: -1, z: 0},\r\n}\r\n\r\nexport function convertBuilding(buildingData: FileBuildingData, blocklist: Blocklist, deltaOnly: boolean): BuildingData[] {\r\n    let buildings: BuildingData[] = [];\r\n    let width = buildingData.textFile!.width;\r\n    let length = buildingData.textFile!.length;\r\n    let startLevel = 0;\r\n    let blocks: BlockItem[][][] = [];\r\n    let paletteLookup: {[key: string]: PaletteItem} = {};\r\n    let paletteArray: PaletteItem[] = [];\r\n    let paletteIndex = 0;\r\n\r\n    for(let png of buildingData.pngs) {\r\n        if(buildingData.textFile?.startLevels[png.index] !== undefined) {\r\n            startLevel = buildingData.textFile?.startLevels[png.index];\r\n        }\r\n        let y = startLevel;\r\n        if(deltaOnly) {\r\n            blocks = [];\r\n            paletteLookup = {};\r\n            paletteArray = [];\r\n            paletteIndex = 0;\r\n        }\r\n        else {\r\n            let newBlocks: BlockItem[][][] = [];\r\n            for(let x in blocks) {\r\n                newBlocks[x] = [];\r\n                for(let y in blocks[x]) {\r\n                    newBlocks[x][y] = blocks[x][y].slice();\r\n                }\r\n            }\r\n            blocks = newBlocks;\r\n            paletteArray = paletteArray.slice();\r\n            let newPaletteLookup: {[key: string]: PaletteItem} = {};\r\n            for(let key in paletteLookup) {\r\n                newPaletteLookup[key] = paletteLookup[key];\r\n            }\r\n            paletteLookup = newPaletteLookup;\r\n            // \"Empty\" is treated differently in base building vs upgrades, so ensure this is cleared out\r\n            delete paletteLookup['255/255/255'];\r\n        }\r\n\r\n        for(let left = 0; left < png.imageData.width; left += width + 1) {\r\n            for(let x = 0; x < length; x++) {\r\n                for(let z = 0; z < width; z++) {\r\n                    let baseIndex = (x * png.imageData.width + left + width - z - 1) * 4;\r\n                    let colourString = `${png.imageData.data[baseIndex]}/${png.imageData.data[baseIndex + 1]}/${png.imageData.data[baseIndex + 2]}`;\r\n                    let paletteItem: PaletteItem | null = paletteLookup[colourString];\r\n                    if(!paletteItem) {\r\n                        let blocklistItem = blocklist[colourString];\r\n                        if(blocklistItem) {\r\n                            paletteItem = blocklistToPalette(blocklistItem, paletteIndex, png.index);\r\n                            if(paletteItem) {\r\n                                paletteLookup[colourString] = paletteItem;\r\n                                paletteArray.push(paletteItem);\r\n                                paletteIndex++;\r\n                            }\r\n                        }\r\n                        else {\r\n                            postMessage({cmd: 'warning', message: `Warning: Unrecognized colour ${colourString} loading building ${buildingData.path} image ${png.path} x ${left + width - z - 1} y ${x}`});\r\n                        }\r\n                    }\r\n                    if(paletteItem) {\r\n                        blocks[x] = blocks[x] || [];\r\n                        blocks[x][y] = blocks[x][y] || [];\r\n                        blocks[x][y][z] = { state: paletteItem.index, after: paletteItem.placeAfter };\r\n                        if(paletteItem.properties.part === 'head' && !!paletteItem.properties.facing) {\r\n                            // Assuming this is the head of a bed, add the foot\r\n                            let fakeColourString = `${paletteItem.name}-foot-${paletteItem.properties.facing}`;\r\n                            let footPalette = paletteLookup[fakeColourString];\r\n                            if(!footPalette) {\r\n                                footPalette = getBedFootPalette(paletteItem, paletteIndex);\r\n                                paletteArray.push(footPalette);\r\n                                paletteIndex++;\r\n                            }\r\n                            let delta = bedDeltas[paletteItem.properties.facing];\r\n                            let footX = x + delta.x;\r\n                            let footZ = z + delta.z;\r\n                            blocks[footX] = blocks[footX] || [];\r\n                            blocks[footX][y] = blocks[footX][y] || [];\r\n                            blocks[footX][y][footZ] = { state: footPalette.index, after: paletteItem.placeAfter }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            y++;\r\n        }\r\n\r\n        buildings.push({\r\n            path: buildingData.path.replace(/\\.txt$/, '') + png.index,\r\n            width,\r\n            length,\r\n            height: y - startLevel,\r\n            startLevel,\r\n            palette: paletteArray,\r\n            blocks,\r\n        });\r\n    }\r\n\r\n    return buildings;\r\n}","/// <reference path=\"../types/nbt.d.ts\" />\r\n\r\nimport { BuildingData } from \"./dataConvert\";\r\n\r\nexport interface NbtFile {\r\n    path: string,\r\n    data: ArrayBuffer\r\n}\r\n\r\nexport function writeBuildings(buildings: BuildingData[], nbtRef: nbt): NbtFile[] {\r\n    let results: NbtFile[] = [];\r\n    for(let building of buildings) {\r\n        let paletteValues = building.palette.map(p => {\r\n            let propertyValues:{ [key: string]: {type: 'string', value: string}} = {};\r\n            for(let propertyName in p.properties) {\r\n                if(p.properties[propertyName]) {\r\n                    propertyValues[propertyName] = { type: 'string', value: p.properties[propertyName] };\r\n                }\r\n            }\r\n            return {\r\n                Name: { type: 'string', value: p.name },\r\n                Properties: { type: 'compound', value: propertyValues }\r\n            };\r\n        });\r\n        let blocks = [];\r\n        let afterBlocks = [];\r\n        for(let x = 0; x < building.length; x++) {\r\n            for(let y = building.startLevel; y < building.height - building.startLevel; y++) {\r\n                for(let z = 0; z < building.width; z++) {\r\n                    let blockData = building.blocks[x] && building.blocks[x][y] && building.blocks[x][y][z];\r\n                    if(blockData) {\r\n                        let blockItem = {\r\n                            state: { type: 'int', value: blockData.state },\r\n                            pos: { type: 'list', value: {\r\n                                type: 'int', value: [x, y, z],\r\n                            }}\r\n                        };\r\n                        if(blockData.after) {\r\n                            afterBlocks.push(blockItem);\r\n                        }\r\n                        else {\r\n                            blocks.push(blockItem);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let blockValues = blocks.concat(...afterBlocks);\r\n        let nbtValues = {\r\n            name: '',\r\n            value: {\r\n                DataVersion: { type: 'int', value: 1343 },\r\n                size: { type: 'list', value: {\r\n                    type: 'int', value: [building.width, building.height, building.length]\r\n                }},\r\n                palette: { type: 'list', value: {\r\n                    type: 'compound', value: paletteValues\r\n                }},\r\n                blocks: { type: 'list', value: {\r\n                    type: 'compound', value: blockValues\r\n                }}\r\n            }\r\n        }\r\n        results.push({ path: building.path + '.nbt', data: nbtRef.writeUncompressed(nbtValues) });\r\n    }\r\n\r\n    return results;\r\n}","/// <reference path=\"../types/file-saver.d.ts\" />\r\n/// <reference path=\"../types/zlib.d.ts\" />\r\n\r\nimport * as JSZip from 'jszip';\r\nimport { NbtFile } from './nbtConvert';\r\n\r\nexport function generateFile(buildings: NbtFile[]): Promise<Blob> {\r\n    let zip = new JSZip();\r\n\r\n    for(let building of buildings) {\r\n        zip.file(building.path, new Zlib.Gzip(new Uint8Array(building.data)).compress());\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        zip.generateAsync({type: 'blob'}).then(blob => {\r\n            resolve(blob);\r\n        }).catch(e => {\r\n            reject(e);\r\n        });\r\n    });\r\n}","import { Blocklist, parseBlocklist } from \"./blocklist\";\r\nimport { BuildingData, convertBuilding } from \"./dataConvert\";\r\nimport { generateFile } from \"./fileGenerator\";\r\nimport { FileBuildingData } from \"./fileParserTypes\";\r\nimport { writeBuildings } from \"./nbtConvert\";\r\n\r\nfunction finishBuilding(building: FileBuildingData, blocklist: Blocklist, deltaOnly: boolean): Promise<BuildingData[]> {\r\n    return new Promise((resolve, reject) => {\r\n        Promise.all(building.promises).then(() => {\r\n            resolve(convertBuilding(building, blocklist, deltaOnly));\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function start(nbtRef: nbt) {\r\n    let buildingPromises: Array<Promise<BuildingData[]>> = [];\r\n    let blocklistData: Blocklist;\r\n\r\n    let handlers: {[key: string]: (data: any) => void} = {\r\n        blocklist: (blocklistFiles) => {\r\n            blocklistData = parseBlocklist(blocklistFiles);\r\n        },\r\n        building: (data) => {\r\n            buildingPromises.push(finishBuilding(data.building, blocklistData, data.deltaOnly));\r\n        },\r\n        buildingsDone: () => {\r\n            Promise.all(buildingPromises).then(buildings => {\r\n                generateFile(writeBuildings(buildings.flat(), nbtRef)).then(blob => {\r\n                    self.postMessage({\r\n                        cmd: 'output',\r\n                        blob\r\n                    })\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    self.addEventListener<'message'>('message', e => {\r\n        try {\r\n            let data = e.data;\r\n            handlers[data.cmd](data.data);\r\n        }\r\n        catch(e) {\r\n            postMessage({cmd: 'error', message: e.toString()})\r\n        }\r\n    });\r\n}"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/fileParserTypes.ts","../src/fileParser.ts","../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["export interface FileBuildingData {\r\n    path: string;\r\n    textFile?: TxtBuildingData;\r\n    pngs: PngBuildingData[];\r\n    promises: Promise<void>[];\r\n}\r\n\r\nexport interface PngBuildingData {\r\n    path: string;\r\n    imageData: ImageData;\r\n    index: number;\r\n}\r\n\r\nexport interface TxtBuildingData {\r\n    width: number;\r\n    length: number;\r\n    startLevels: number[];\r\n}","import * as JSZip from 'jszip';\r\nimport { PngBuildingData, TxtBuildingData } from './fileParserTypes';\r\n\r\nexport function parseImage(file: JSZip.JSZipObject, index: number, path: string): Promise<PngBuildingData> {\r\n    return new Promise((resolve, reject) => {\r\n        file.async('blob').then(createImageBitmap).then(image => {\r\n            let canvas = document.createElement('canvas');\r\n            canvas.width = image.width;\r\n            canvas.height = image.height;\r\n            let context = canvas.getContext('2d')!;\r\n            context.drawImage(image, 0, 0);\r\n            resolve({ imageData: context.getImageData(0, 0, image.width, image.height), index, path });\r\n        }).catch(e => {\r\n            reject(e);\r\n        });\r\n    });\r\n}\r\n\r\nexport function parseTextFile(file: JSZip.JSZipObject): Promise<TxtBuildingData> {\r\n    return new Promise((resolve, reject) => {\r\n        file.async('string').then(content => {\r\n            let width = 0;\r\n            let length = 0;\r\n            let startLevels: number[] = [];\r\n            for(let line of content.split(/\\r?\\n/)) {\r\n                if(line.startsWith('building.width')) {\r\n                    width = +line.split('=')[1];\r\n                }\r\n                else if(line.startsWith('building.length')) {\r\n                    length = +line.split('=')[1];\r\n                }\r\n                else if(line.startsWith('initial.startlevel')) {\r\n                    startLevels[0] = +line.split('=')[1];\r\n                }\r\n                else if(/^upgrade\\d+\\.startlevel/.test(line)) {\r\n                    let level = +/^upgrade(\\d+)/.exec(line)![1];\r\n                    startLevels[level] = +line.split('=')[1];\r\n                }\r\n            }\r\n            resolve({width, length, startLevels});\r\n        }).catch(e => {\r\n            reject(e);\r\n        });\r\n    });\r\n}","/// <reference path=\"../types/file-saver.d.ts\" />\r\n\r\nimport JSZip = require(\"jszip\");\r\nimport { parseImage, parseTextFile } from \"./fileParser\";\r\nimport { FileBuildingData } from \"./fileParserTypes\";\r\n\r\nlet worker: Worker;\r\n\r\nfunction waitForBuilding(building: FileBuildingData, deltaOnly: boolean): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n        Promise.all(building.promises).then(() => {\r\n            building.promises = [];\r\n            let transferred = [];\r\n            for(let png of building.pngs) {\r\n                transferred.push(png.imageData.data.buffer);\r\n            }\r\n            worker.postMessage({ cmd: 'building', data: { building, deltaOnly }}, transferred);\r\n            resolve();\r\n        }).catch(e => {\r\n            reject(e);\r\n        });\r\n    });\r\n}\r\n\r\nfunction showMessage(message: string, messageType: string) {\r\n    let messageBoard = (document.querySelector(\"#message-board\")) as HTMLDivElement;\r\n\r\n    let newMessage = document.createElement('div');\r\n    newMessage.innerText = message;\r\n    newMessage.classList.add('alert');\r\n    newMessage.classList.add('alert-' + messageType);\r\n    messageBoard.appendChild(newMessage);\r\n}\r\n\r\nexport function start() {\r\n    let blocklistInput = (document.querySelector('#blocklist')) as HTMLInputElement;\r\n    let fileInput = (document.querySelector('#upload')) as HTMLInputElement;\r\n    let goButton = (document.querySelector('#go')) as HTMLButtonElement;\r\n    let downloadButton = (document.querySelector('#download')) as HTMLButtonElement;\r\n    let downloadIcon = (document.querySelector('#download-icon')) as HTMLSpanElement;\r\n    let downloadText = (document.querySelector('#download-text')) as HTMLSpanElement;\r\n    let deltaCheckbox = (document.querySelector(\"#deltaOnly\")) as HTMLInputElement;\r\n    let messageBoard = (document.querySelector(\"#message-board\")) as HTMLDivElement;\r\n\r\n    worker = new Worker('worker-main.js');\r\n    worker.addEventListener('message', e => {\r\n        let data = e.data;\r\n        if(data.cmd === 'output') {\r\n            downloadIcon.classList.add('d-none');\r\n            downloadText.innerText = 'Download';\r\n            downloadButton.disabled = false;\r\n            downloadButton.classList.add('btn-success');\r\n            downloadButton.classList.remove('btn-primary');\r\n            downloadButton.addEventListener('click', () => {\r\n                saveAs(data.blob, 'buildings.zip');\r\n            });\r\n        }\r\n        else if(data.cmd === 'warning') {\r\n            showMessage(data.message, 'warning');\r\n        }\r\n        else if(data.cmd === 'error') {\r\n            showMessage(data.message, 'danger');\r\n        }\r\n    });\r\n\r\n    goButton.addEventListener('click', () => {\r\n        messageBoard.innerHTML = '';\r\n        if(!blocklistInput.files?.length || !fileInput.files?.length) {\r\n            showMessage('Please supply all required files', 'danger');\r\n            return;\r\n        }\r\n\r\n        if(!/\\.zip$/.test(fileInput.files[0].name)) {\r\n            showMessage('Buildings file should be a zip archive', 'danger');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            goButton.classList.add('d-none');\r\n            downloadButton.classList.remove('d-none');\r\n\r\n            worker.postMessage({ cmd: 'blocklist', data: blocklistInput.files});\r\n\r\n            JSZip.loadAsync(fileInput.files[0]).then(zip => {\r\n                let currentBuilding: FileBuildingData | null = null;\r\n                let buildingPromises: Array<Promise<void>> = [];\r\n                let deltaOnly = deltaCheckbox.checked;\r\n                zip.forEach((path, entry) => {\r\n                    if(/\\.txt$/.test(path)) {\r\n                        if(currentBuilding) {\r\n                            buildingPromises.push(waitForBuilding(currentBuilding, deltaOnly));\r\n                        }\r\n                        currentBuilding = {\r\n                            path: path,\r\n                            pngs: [],\r\n                            promises: [],\r\n                        };\r\n                        currentBuilding.promises.push(new Promise((resolve, reject) => {\r\n                            let thisBuilding = currentBuilding!;\r\n                            parseTextFile(entry).then(data => {\r\n                                thisBuilding.textFile = data;\r\n                                resolve();\r\n                            }).catch(e => {\r\n                                reject(e);\r\n                            });\r\n                        }));\r\n                    }\r\n                    else if(/\\.png$/.test(path)) {\r\n                        currentBuilding?.promises.push(new Promise((resolve, reject) => {\r\n                            let thisBuilding = currentBuilding!;\r\n                            let index = +path.replace(/\\.png$/, '')?.match(/\\d+$/)![0];\r\n                            parseImage(entry, index, path).then(data => {\r\n                                thisBuilding.pngs.push(data);\r\n                                resolve();\r\n                            }).catch(e => {\r\n                                reject(e);\r\n                            });\r\n                        }));\r\n                    }\r\n                });\r\n\r\n                if(currentBuilding) {\r\n                    buildingPromises.push(waitForBuilding(currentBuilding, deltaOnly));\r\n                }\r\n\r\n                Promise.all(buildingPromises).then(() => {\r\n                    worker.postMessage({ cmd: 'buildingsDone'});\r\n                }).catch(e => {\r\n                    showMessage(e.toString(), 'danger');\r\n                });\r\n            }).catch(e => {\r\n                showMessage(e.toString(), 'danger');\r\n            });\r\n        }\r\n        catch(e) {\r\n            showMessage(e.toString(), 'danger');\r\n        }\r\n    });\r\n}"]}